@page
@model TrafficLawDocumentRazor.Pages.ChatboxModel
@{
}

<!-- Full-page Chatbox -->
<div style="display: flex; justify-content: center; padding-top: 20px; padding-bottom: 20px;">
    <div class="chatbox-fullpage">
        <div class="chat-header">
            <h2>Support chat</h2>
        </div>
        <div id="chatBody" class="chat-body">
            @foreach (var msg in Model.ChatHistory)
            {
                <div class="message @(msg.IsUser ? "user" : "bot")">
                    @msg.Text

                    @if (!msg.IsUser)
                    {
                        <a asp-page="/FeedbackPage/Create"
                           asp-route-chatHistoryId="@msg.ChatHistoryId"
                           asp-route-userId="@msg.UserId"
                        class="bot-icon">🏳️</a>
                    }
                </div>
            }
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="loading-indicator" style="display: none;">
            <div class="typing-animation">Bot is typing...</div>
        </div>

        <form id="chatForm">
            <div class="chat-input">
                <input type="text" placeholder="Type a message..." id="messageInput" />
                <button type="submit" class="send-btn" id="sendButton">➤</button>
            </div>
        </form>
    </div>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script>
        const chatBody = document.getElementById("chatBody");
        const messageInput = document.getElementById("messageInput");
        const chatForm = document.getElementById("chatForm");
        const loadingIndicator = document.getElementById("loadingIndicator");
        const sendButton = document.getElementById("sendButton");
        
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const userId = "@Model.UserId";

        // Start SignalR connection
        connection.start().then(function () {
            console.log("SignalR connected");
            // Join user group
            connection.invoke("JoinUserGroup", userId);
        }).catch(function (err) {
            console.error("SignalR connection error: " + err.toString());
        });

        // Receive messages from SignalR
        connection.on("ReceiveMessage", function (data, isUser) {
            const messageDiv = document.createElement("div");
            messageDiv.className = isUser ? "message user" : "message bot";
            
            if (isUser) {
                messageDiv.textContent = data;
            } else {
                messageDiv.innerHTML = `${data.answer}
                <a href="/FeedbackPage/Create?chatHistoryId=${data.id}&userId=${data.userId}" class="bot-icon">🏳️</a>`;
            }
            
            chatBody.appendChild(messageDiv);
            chatBody.scrollTop = chatBody.scrollHeight;
        });

        // Handle loading state changes
        connection.on("SetLoadingState", function (isLoading) {
            if (isLoading) {
                loadingIndicator.style.display = 'block';
                sendButton.disabled = true;
                sendButton.style.opacity = '0.5';
            } else {
                loadingIndicator.style.display = 'none';
                sendButton.disabled = false;
                sendButton.style.opacity = '1';
            }
            chatBody.scrollTop = chatBody.scrollHeight;
        });

        // Handle error messages
        connection.on("ShowError", function (errorMessage) {
            const errorDiv = document.createElement("div");
            errorDiv.className = "message error";
            errorDiv.textContent = "Error: " + errorMessage;
            errorDiv.style.color = 'red';
            errorDiv.style.fontStyle = 'italic';
            
            chatBody.appendChild(errorDiv);
            chatBody.scrollTop = chatBody.scrollHeight;
        });

        // Handle form submission
        chatForm.addEventListener("submit", function (e) {
            e.preventDefault();
            
            const message = messageInput.value.trim();
            if (!message) return;

            // Clear input immediately
            messageInput.value = "";
            
            // Send message via SignalR - This will handle everything securely
            connection.invoke("SendMessage", userId, message).catch(function (err) {
                console.error("Error sending message: " + err.toString());
                // Show error in chat
                const errorDiv = document.createElement("div");
                errorDiv.className = "message error";
                errorDiv.textContent = "Failed to send message. Please try again.";
                errorDiv.style.color = 'red';
                chatBody.appendChild(errorDiv);
                chatBody.scrollTop = chatBody.scrollHeight;
            });
        });

        // Handle Enter key in input
        messageInput.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                chatForm.dispatchEvent(new Event('submit'));
            }
        });
    </script>
}

<style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #f4f6fa;
        }

        .chatbox-fullpage {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 130px);
            width: 95vw;
            max-width: none;
            margin: 0 auto;
            background: #fff;
            box-shadow: 0 0 24px rgba(0,0,0,0.08);
            border-radius: 12px;
            overflow: hidden;
        }
        .chat-header {
            background: #2563eb;
            color: #fff;
            padding: 1.2rem 2rem;
            font-size: 1.5rem;
            font-weight: 600;
            letter-spacing: 1px;
        }
        .chat-body {
            flex: 1;
            overflow-y: auto;
            padding: 2rem;
            background: #f9fafb;
            display: flex;
            flex-direction: column;
            gap: 1.2rem;
        }
        .message {
            max-width: 70%;
            padding: 1rem 1.5rem;
            border-radius: 1.5rem;
            font-size: 1.1rem;
            line-height: 1.5;
            word-break: break-word;
            box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        }
        .message.user {
            align-self: flex-end;
            background: #2563eb;
            color: #fff;
        }
        .message.bot {
            align-self: flex-start;
            background: #e5e7eb;
            color: #222;
        }
        .message.error {
            align-self: center;
            background: #fee2e2;
            color: #b91c1c;
        }
        .bot-icon {
            margin-left: 0.5rem;
            font-size: 1.2rem;
            vertical-align: middle;
            text-decoration: none;
        }
        .chat-input {
            display: flex;
            align-items: center;
            padding: 1.2rem 2rem;
            background: #f3f4f6;
            border-top: 1px solid #e5e7eb;
        }
        .chat-input input[type="text"] {
            flex: 1;
            padding: 0.9rem 1.2rem;
            border: 1px solid #d1d5db;
            border-radius: 2rem;
            font-size: 1.1rem;
            outline: none;
            margin-right: 1rem;
            background: #fff;
        }
        .send-btn {
            background: #2563eb;
            color: #fff;
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            font-size: 1.3rem;
            cursor: pointer;
            transition: background 0.2s;
        }
        .send-btn:disabled {
            background: #a5b4fc;
            cursor: not-allowed;
        }
        .loading-indicator {
            text-align: center;
            margin: 1rem 0;
        }
        .typing-animation {
            display: inline-block;
            font-style: italic;
            color: #6b7280;
        }
        media (max-width: 800px) {
            .chatbox-fullpage {
                max-width: 100vw;
                border-radius: 0;
            }
            .chat-header, .chat-input {
                padding-left: 1rem;
                padding-right: 1rem;
            }
            .chat-body {
                padding: 1rem;
            }
        }
</style>
