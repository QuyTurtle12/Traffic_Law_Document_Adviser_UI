@page
@model TrafficLawDocumentRazor.Pages.LawDocumentPage.DetailsModel
@{
    ViewData["Title"] = "Details";
}
@section Styles {
    <link rel="stylesheet" href="~/css/site2.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
}
<div class="page-wrapper" style="margin-bottom: 60px">
    <div class="main custom-main" >
            <div class="main-content">
                <div class="breadcrumb">
                    Home / Law Documents / Details
                </div>
                <div>
                    <h1>@Model.LawDocument.Title</h1>
                </div>
                <div class="container">
                    <div class="main" >
                        <div class="tabs">
                            <button class="active" data-tab="summary">Summary</button>
                            <button data-tab="content">Content</button>
                            @* <button data-tab="status">Status</button> *@
                            <button data-tab="download">Download</button>
                        </div>

                        <div class="tab-content" id="summary" style="display: block">
                            <div class="legal-wrapper">
                                <div class="summary-section">
                                    <h2>ATTRIBUTE</h2>
                                    <p><strong>@Model.LawDocument.Title</strong></p>
                                    <table class="summary-table">
                                        <tr>
                                            <td><strong>Document Code:</strong></td>
                                            <td>@Model.LawDocument.DocumentCode</td>
                                            <td><strong>Expert Verified:</strong></td>
                                            <td class="status-known">@(Model.LawDocument.ExpertVerification ? "Yes" : "No")</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Category:</strong></td>
                                            <td>@Model.LawDocument.Category?.Name</td>
                                            <td><strong>Created:</strong></td>
                                            <td>@Model.LawDocument.CreatedTime?.ToString("dd/MM/yyyy")</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Created By:</strong></td>
                                            <td>@Model.LawDocument.CreatedBy</td>
                                            <td><strong>Last Updated:</strong></td>
                                            <td>@Model.LawDocument.LastUpdatedTime?.ToString("dd/MM/yyyy")</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="tab-content" id="content" style="display: none">
                            <div class="legal-wrapper">
                                @* <p>Document Link: <a href="@Model.LawDocument.LinkPath" target="_blank">@Model.LawDocument.LinkPath</a></p> *@
                                @* <embed src="~/files/135-2025-ND-CP.pdf" type="application/pdf" width="100%" height="800px" /> *@
                                <embed src="@Model.LawDocument.FilePath" type="application/pdf" width="100%" height="800px" />
                            </div>
                        </div>

                        @* <div class="tab-content" id="status" style="display: none">
                            <p>Status: @(Model.LawDocument.DeletedTime.HasValue ? "Deleted" : "Active")</p>
                        </div> *@

                    <div class="tab-content" id="download" style="display: none">
                        <div class="legal-wrapper">
                            <div class="download-buttons">
                                @{
                                    // Create a safe filename from the Title
                                    var safeFileName = System.Text.RegularExpressions.Regex
                                    .Replace(Model.LawDocument.Title ?? "document", @"[^a-zA-Z0-9\-_.]+", "_")
                                    .Trim('_') + ".pdf";
                                }
                                <button class="btn btn-primary"
                                        onclick="downloadFromApi(
                      '@Model.LawDocument.LinkPath',
                      '@safeFileName'
                    )">
                                    <i class="fas fa-file-pdf"></i> Download PDF
                                </button>
                            </div>
                        </div>
                    </div>


                        


                    </div>

                    <aside class="sidebar">
                        <h4>MOST VIEWED</h4>
                        <div class="box most-viewed">
                            <ul class="most-viewed-list">
                                <li>Placeholder document 1</li>
                                <li>Placeholder document 2</li>
                            </ul>
                        </div>
                    </aside>
                </div>
            </div>
       
    </div>
@section Scripts {
        <script>
            // Point to your API host:port
            const apiBaseUrl = '@Model.ApiBaseUrl';

            function downloadFromApi(cloudUrl, fileName) {
              const url = `${apiBaseUrl}/photo/download?url=${encodeURIComponent(cloudUrl)}`;

              fetch(url, {
                // include credentials if needed:
                // credentials: 'include'
              })
              .then(resp => {
                if (!resp.ok) {
                  throw new Error(`Server returned ${resp.status}`);
                }
                return resp.blob();
              })
              .then(blob => {
                const objectUrl = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = objectUrl;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                URL.revokeObjectURL(objectUrl);
              })
              .catch(err => {
                console.error('Download failed:', err);
                alert('Unable to download file.');
              });
            }

            // Tab‐switcher logic (unchanged)
            document.addEventListener("DOMContentLoaded", function () {
              const tabs = document.querySelectorAll(".tabs button");
              const contents = document.querySelectorAll(".tab-content");
              tabs.forEach(t => t.addEventListener("click", function () {
                tabs.forEach(x => x.classList.remove("active"));
                this.classList.add("active");
                contents.forEach(c => c.style.display = "none");
                document.getElementById(this.dataset.tab).style.display = "block";
              }));
            });
        </script>
}
